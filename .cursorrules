# AI Messaging Tool - Deployment Configuration

## üèóÔ∏è Current Architecture (Updated 2025-09-19)

### **Production Environment:**
- **Frontend**: EC2 Instance (`34.195.237.115:3000`)
- **Backend**: ECS Fargate (`production-ai-messaging-alb-746376383.us-east-1.elb.amazonaws.com:8001`)
- **Database**: RDS PostgreSQL (`production-ai-messaging-db.cmpkwkuqu30h.us-east-1.rds.amazonaws.com:5432`)
- **Cache**: ElastiCache Redis (`production-ai-messaging-redis.cmpkwkuqu30h.cache.amazonaws.com:6379`)

### **SSH Connections:**
```bash
# Frontend EC2 (Ubuntu)
ssh -i ~/.ssh/ai-messaging-frontend-key.pem ubuntu@34.195.237.115

# Backend EC2 (Ubuntu) - Legacy
ssh -i ~/.ssh/ai-messaging-frontend-key.pem ubuntu@98.85.16.204
```

### **AWS Resources:**
- **ECS Cluster**: `production-ai-messaging-cluster`
- **ECS Service**: `production-ai-messaging-backend-service`
- **ECR Repository**: `957440525184.dkr.ecr.us-east-1.amazonaws.com/production-ai-messaging-backend`
- **Load Balancer**: `production-ai-messaging-alb-746376383.us-east-1.elb.amazonaws.com:8001`

### **Code Locations:**
- **Local Backend**: `/Users/apple/Documents/aimsg/Automated-AI-Messaging-Tool-Backend/` (Complete 2,591 lines)
- **Local Frontend**: `/Users/apple/Documents/aimsg/Automated-AI-Messaging-Tool-Frontend/`
- **EC2 Frontend**: `/home/ubuntu/ai-messaging-tool/Automated-AI-Messaging-Tool-Frontend/`
- **EC2 Backend**: `/home/ubuntu/ai-messaging-tool/Automated-AI-Messaging-Tool-Backend/` (Legacy)

### **Deployment Methods:**

#### **1. GitHub Actions (Recommended):**
```bash
# Backend deployment (ECS)
git add .
git commit -m "Update backend"
git push origin main
# Triggers: .github/workflows/deploy-backend-to-ecs.yml

# Frontend deployment (EC2)
git add .
git commit -m "Update frontend"
git push origin main
# Triggers: .github/workflows/deploy-frontend-to-ec2.yml
```

#### **2. Manual Backend Deployment:**
```bash
# Build and push to ECR
cd /Users/apple/Documents/aimsg/Automated-AI-Messaging-Tool-Backend
docker build -t production-ai-messaging-backend:latest .
docker tag production-ai-messaging-backend:latest 957440525184.dkr.ecr.us-east-1.amazonaws.com/production-ai-messaging-backend:latest
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 957440525184.dkr.ecr.us-east-1.amazonaws.com
docker push 957440525184.dkr.ecr.us-east-1.amazonaws.com/production-ai-messaging-backend:latest

# Deploy to ECS
aws ecs update-service --cluster production-ai-messaging-cluster --service production-ai-messaging-backend-service --force-new-deployment --region us-east-1
```

#### **3. Manual Frontend Deployment:**
```bash
# SSH to EC2 and update
ssh -i ~/.ssh/ai-messaging-frontend-key.pem ubuntu@34.195.237.115
cd /home/ubuntu/ai-messaging-tool/Automated-AI-Messaging-Tool-Frontend
git pull origin main
npm run build
pm2 restart frontend
```

### **Health Check Endpoints:**
- **ECS Backend**: `http://production-ai-messaging-alb-746376383.us-east-1.elb.amazonaws.com:8001/api/health`
- **EC2 Frontend**: `http://34.195.237.115:3000/api/test-backend`

### **Environment Variables:**

#### **Backend (ECS):**
```bash
DATABASE_URL=postgresql://postgres:AiMessaging2024Secure@production-ai-messaging-db.cmpkwkuqu30h.us-east-1.rds.amazonaws.com:5432/ai_messaging
REDIS_URL=redis://production-ai-messaging-redis.cmpkwkuqu30h.cache.amazonaws.com:6379
CORS_ORIGINS=["http://34.195.237.115:3000", "http://localhost:3000", "http://localhost:3001"]
```

#### **Frontend (EC2):**
```bash
PYTHON_API_URL=http://production-ai-messaging-alb-746376383.us-east-1.elb.amazonaws.com:8001
NEXT_PUBLIC_PYTHON_BACKEND_URL=http://production-ai-messaging-alb-746376383.us-east-1.elb.amazonaws.com:8001
```

### **Important Notes:**
1. **Always use complete EC2 code** (2,591 lines) for Docker builds
2. **ECS account ID**: `957440525184` (not 123456789012)
3. **Health endpoint**: `/api/health` (not `/health`)
4. **Backend port**: 8001 (not 8000)
5. **CORS**: Must include EC2 frontend URL in allowed origins

### **Quick Commands:**
```bash
# Test backend health
curl http://production-ai-messaging-alb-746376383.us-east-1.elb.amazonaws.com:8001/api/health

# Test frontend-backend connection
curl http://34.195.237.115:3000/api/test-backend

# Force ECS deployment
aws ecs update-service --cluster production-ai-messaging-cluster --service production-ai-messaging-backend-service --force-new-deployment --region us-east-1

# Check ECS service status
aws ecs describe-services --cluster production-ai-messaging-cluster --services production-ai-messaging-backend-service --region us-east-1
```

### **GitHub Actions Secrets Required:**
- `AWS_ACCESS_KEY_ID`
- `AWS_SECRET_ACCESS_KEY`
- `EC2_SSH_KEY`

### **Code Synchronization Status:**
- ‚úÖ **Local = EC2 = ECS** (All have complete 2,591-line production code)
- ‚úÖ **Frontend ‚Üí ECS Backend** (All URLs updated)
- ‚úÖ **GitHub Actions** (Automated deployment configured)