name: Deploy Backend to ECS

on:
  push:
    branches: [ main ]
    paths:
      - '**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: production-ai-messaging-backend
  ECS_SERVICE: production-ai-messaging-backend-service
  ECS_CLUSTER: production-ai-messaging-cluster
  ECS_TASK_DEFINITION: production-ai-messaging-backend

jobs:
  deploy:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ../cloudformation/task-definitions/backend-task-definition.json
        container-name: backend
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false

    - name: Wait for deployment to start
      run: |
        echo "Waiting for deployment to start..."
        sleep 30
        
    - name: Check deployment status
      run: |
        echo "Checking ECS service status..."
        aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,TaskDefinition:taskDefinition}'
        
    - name: Verify health endpoint
      run: |
        echo "Testing health endpoint..."
        for i in {1..10}; do
          if curl -f --max-time 5 http://production-ai-messaging-alb-746376383.us-east-1.elb.amazonaws.com:8001/api/health; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Health check attempt $i failed, retrying in 30 seconds..."
          sleep 30
        done
        echo "Health check failed after 10 attempts"
        exit 1
        
    - name: Check S3 service initialization
      run: |
        echo "Checking if S3 service is initialized..."
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'taskArns[0]' --output text)
        if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "" ]; then
          TASK_ID=$(echo $TASK_ARN | cut -d'/' -f3)
          echo "Checking logs for S3 service initialization..."
          aws logs get-log-events --log-group-name "/ecs/production-ai-messaging-backend" --log-stream-name "ecs/backend/$TASK_ID" --region ${{ env.AWS_REGION }} --start-time $(($(date +%s) - 600))000 --query 'events[?contains(message, `S3 service initialized`)].message' --output text
        else
          echo "No running tasks found"
        fi