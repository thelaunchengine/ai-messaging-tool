#!/bin/bash

# SSH Key Authentication Setup for Backend Upload System
# Server: 103.215.159.51
# User: xb3353

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SERVER_HOST="103.215.159.51"
SERVER_USER="xb3353"
SERVER_PATH="/home/xb3353/Automated-AI-Messaging-Tool-Backend"
SSH_KEY_NAME="backend_upload_key"
SSH_KEY_PATH="$HOME/.ssh/$SSH_KEY_NAME"

echo -e "${BLUE}🔑 Setting up SSH Key Authentication for Backend Upload System${NC}"
echo "=================================================="

# Check if SSH key already exists
if [ -f "$SSH_KEY_PATH" ]; then
    echo -e "${YELLOW}⚠️  SSH key already exists at $SSH_KEY_PATH${NC}"
    read -p "Do you want to overwrite it? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Using existing SSH key...${NC}"
    else
        rm -f "$SSH_KEY_PATH"
        rm -f "$SSH_KEY_PATH.pub"
    fi
fi

# Generate SSH key if it doesn't exist
if [ ! -f "$SSH_KEY_PATH" ]; then
    echo -e "${BLUE}🔧 Generating new SSH key...${NC}"
    ssh-keygen -t rsa -b 4096 -f "$SSH_KEY_PATH" -N "" -C "backend-upload-$USER@$(hostname)"
    echo -e "${GREEN}✅ SSH key generated successfully${NC}"
fi

# Test SSH connection with password first
echo -e "${BLUE}🔍 Testing SSH connection...${NC}"
if ssh -o ConnectTimeout=10 -o BatchMode=no "$SERVER_USER@$SERVER_HOST" "echo 'SSH connection successful'" 2>/dev/null; then
    echo -e "${GREEN}✅ SSH connection with password works${NC}"
else
    echo -e "${RED}❌ SSH connection failed. Please check your credentials.${NC}"
    echo "Make sure you can connect manually with: ssh $SERVER_USER@$SERVER_HOST"
    exit 1
fi

# Copy public key to server
echo -e "${BLUE}📤 Copying SSH public key to server...${NC}"
if ssh-copy-id -i "$SSH_KEY_PATH.pub" "$SERVER_USER@$SERVER_HOST"; then
    echo -e "${GREEN}✅ SSH key copied to server successfully${NC}"
else
    echo -e "${RED}❌ Failed to copy SSH key to server${NC}"
    echo "You may need to manually add the key to ~/.ssh/authorized_keys on the server"
    exit 1
fi

# Test passwordless connection
echo -e "${BLUE}🔍 Testing passwordless SSH connection...${NC}"
if ssh -o ConnectTimeout=10 -o BatchMode=yes -i "$SSH_KEY_PATH" "$SERVER_USER@$SERVER_HOST" "echo 'Passwordless SSH connection successful'" 2>/dev/null; then
    echo -e "${GREEN}✅ Passwordless SSH connection works!${NC}"
else
    echo -e "${RED}❌ Passwordless SSH connection failed${NC}"
    echo "Please check the server's SSH configuration"
    exit 1
fi

# Create SSH config for easier access
SSH_CONFIG="$HOME/.ssh/config"
SSH_CONFIG_ENTRY="Host backend-server
    HostName $SERVER_HOST
    User $SERVER_USER
    IdentityFile $SSH_KEY_PATH
    IdentitiesOnly yes
    ConnectTimeout 30
    ServerAliveInterval 60
    ServerAliveCountMax 3"

echo -e "${BLUE}📝 Adding SSH config entry...${NC}"
if [ ! -f "$SSH_CONFIG" ]; then
    mkdir -p "$HOME/.ssh"
    touch "$SSH_CONFIG"
    chmod 600 "$SSH_CONFIG"
fi

# Check if config entry already exists
if grep -q "Host backend-server" "$SSH_CONFIG" 2>/dev/null; then
    echo -e "${YELLOW}⚠️  SSH config entry already exists${NC}"
else
    echo "$SSH_CONFIG_ENTRY" >> "$SSH_CONFIG"
    echo -e "${GREEN}✅ SSH config entry added${NC}"
fi

# Test connection using SSH config
echo -e "${BLUE}🔍 Testing connection using SSH config...${NC}"
if ssh -o ConnectTimeout=10 backend-server "echo 'SSH config connection successful'" 2>/dev/null; then
    echo -e "${GREEN}✅ SSH config connection works!${NC}"
else
    echo -e "${RED}❌ SSH config connection failed${NC}"
fi

# Create upload configuration file
CONFIG_FILE="upload-config.sh"
cat > "$CONFIG_FILE" << EOF
#!/bin/bash
# Upload Configuration for Backend Project
# Generated by setup-ssh-keys.sh

export SERVER_HOST="$SERVER_HOST"
export SERVER_USER="$SERVER_USER"
export SERVER_PATH="$SERVER_PATH"
export SSH_KEY_PATH="$SSH_KEY_PATH"
export SSH_HOST_ALIAS="backend-server"

# Backend service configuration
export BACKEND_PORT="8000"
export BACKEND_SERVICE_NAME="ai-messaging-backend"

# Upload directories
export UPLOAD_STAGING_DIR="toUpload"
export UPLOAD_BACKUP_DIR="uploadBackups"

# File patterns to upload
export PYTHON_FILES="*.py"
export CONFIG_FILES="*.txt *.yml *.yaml *.json *.env*"
export REQUIREMENT_FILES="requirements*.txt"
export SHELL_FILES="*.sh"

echo "✅ Upload configuration loaded"
EOF

chmod +x "$CONFIG_FILE"
echo -e "${GREEN}✅ Upload configuration file created: $CONFIG_FILE${NC}"

echo ""
echo -e "${GREEN}🎉 SSH Key Authentication Setup Complete!${NC}"
echo "=================================================="
echo -e "${BLUE}📋 Summary:${NC}"
echo "  • SSH key: $SSH_KEY_PATH"
echo "  • Server: $SERVER_USER@$SERVER_HOST"
echo "  • Remote path: $SERVER_PATH"
echo "  • SSH alias: backend-server"
echo "  • Config file: $CONFIG_FILE"
echo ""
echo -e "${BLUE}🚀 Next steps:${NC}"
echo "  1. Run: source $CONFIG_FILE"
echo "  2. Test: ssh backend-server 'pwd'"
echo "  3. Use: ./upload-to-server.sh"
echo ""
echo -e "${YELLOW}💡 Tip: You can now connect with: ssh backend-server${NC}" 